View(patient.data.VHLlow)
## get VHL point mutant samples or samples with CNV loss
VHLmut.samples <- read.table("KIRC_TCGA_VHL_casesEffected.2023-02-24.tsv", header = T)
VHLcnv.status <- read.table("KIRC_VHL_CNV.txt", header = T)
VHLloss.samples <- as.data.frame(VHLcnv.status$id[VHLcnv.status$VHLminCopyNumber == 1])
VHLnorm.samples <- as.data.frame(VHLcnv.status$id[VHLcnv.status$VHLminCopyNumber == 2])
colnames(VHLloss.samples) <- "id"
colnames(VHLnorm.samples) <- "id"
patient.data.VHLmut <- patient.data[toupper(patient.data$OTHER_PATIENT_ID) %in% intersect(toupper(VHLmut.samples$id), toupper(patient.data$OTHER_PATIENT_ID)),]
patient.data.VHLcnvLoss <- patient.data[toupper(patient.data$patientId) %in% intersect(toupper(VHLloss.samples$id), toupper(patient.data$patientId)),]
patient.data.VHLcnvNorm <- patient.data[toupper(patient.data$patientId) %in% intersect(toupper(VHLnorm.samples$id), toupper(patient.data$patientId)),]
patient.data.VHL.LOF <- unique(rbind(patient.data.VHLmut, patient.data.VHLcnvLoss))
patient.data.VHLwt <- patient.data.VHLcnvNorm[toupper(patient.data.VHLcnvNorm$OTHER_PATIENT_ID) %in% setdiff(toupper(patient.data.VHLcnvNorm$OTHER_PATIENT_ID), toupper(patient.data.VHL.LOF$OTHER_PATIENT_ID)),]
intersect(patient.data.VHL.LOF$patientId, patient.data.VHLhigh$patientId)
intersect(patient.data.VHL.LOF$patientId, patient.data.VHLlow$patientId)
intersect(patient.data.VHLmut$patientId, patient.data.VHLhigh$patientId)
intersect(patient.data.VHLmut$patientId, patient.data.VHLlow$patientId)
patient.data.withVHL.noMuts <- patient.data.withVHL[setdiff(patient.data.withVHL$patientId, patient.data.VHLmut$patientId),]
patient.data.VHLlow <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL < 256.1237,]
patient.data.VHLhigh <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL > 444.9585,]
## plot survival based on Sig I or II
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLlow$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLlow)
setwd("~/Documents/speckleSignature/Assess_patient_data/")
library(stringr)
library(dplyr)
library(survival)
library(survminer)
library(ggplot2)
library(hrbrthemes)
library(viridis)
library(cBioPortalData)
library(AnVIL)
study <- "kirc_tcga_pan_can_atlas_2018"
## get clinical data
patient.data <- read.table(paste("patientData_cBioPortal/", study, "_patientData.txt", sep=""), sep="\t", header=T)
## get speckle scores
speckle.data <- read.table(paste("../Speckle_signature_definition/cBioPortal_signatureSpeckleScores_22cancers/", study, "_Zscore_speckleScore.txt", sep=""), sep="\t", header=T, row.names=1)
speckle.data.scores <- as.data.frame(speckle.data$speckleScore)
row.names(speckle.data.scores) <- row.names(speckle.data)
colnames(speckle.data.scores) <- "SpeckleScore"
speckle.data.scores$patientId <- str_sub(row.names(speckle.data.scores), start = 1, end = 12)
speckle.data.scores$patientId <- gsub("\\.", "-", speckle.data.scores$patientId)
## add speckle scores to clinical data
patient.data <- merge(patient.data, speckle.data.scores, by = "patientId")
## add binary for speckle signature
patient.data$SpeckleSignature <- with(patient.data, ifelse(SpeckleScore > 0, "I", "II"))
## download VHL expression data from cBioPortal
## cBioPortal TCGA API is used to generate the speckle signature from tumor samples
cbio <- cBioPortal()
rna.experiment.name <- "mrna_seq_v2_rsem"
mols <- molecularProfiles(cbio, study)
mols <- as.data.frame(mols)
RNAprofileID <- mols$molecularProfileId[grep("_rna_seq_v2_mrna$", mols$molecularProfileId)]
expressionTibble <- getDataByGenes(cbio, molecularProfileIds = RNAprofileID, sampleIds = allSamples(cbio, study)$sampleId, genes = "VHL", by = 'hugoGeneSymbol')
expressionTibble <- na.omit(expressionTibble)
expressionDF <- data.frame(matrix(ncol = length(unique(expressionTibble[[RNAprofileID]]$sampleId)), nrow = length(unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol))))
colnames(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$sampleId)
row.names(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol)
for (i in colnames(expressionDF)){
for (j in row.names(expressionDF)){
value = expressionTibble[[RNAprofileID]]$value[expressionTibble[[RNAprofileID]]$sampleId == i & expressionTibble[[RNAprofileID]]$hugoGeneSymbol == j]
if (!identical(value, numeric(0))){
expressionDF[j, i] <- as.numeric(value)
}
}
}
expressionDF <- as.data.frame(t(expressionDF))
expressionDF$patientId <- substr(rownames(expressionDF), 1, 12)
quantile(expressionDF$VHL)
##        0%       25%       50%       75%      100%
##   28.6607  256.1237  342.5820  444.9585 1334.6600
patient.data.withVHL <- merge(patient.data, expressionDF, by = "patientId")
## get VHL point mutant samples
VHLmut.samples <- read.table("KIRC_TCGA_VHL_casesEffected.2023-02-24.tsv", header = T)
patient.data.VHLmut <- patient.data[toupper(patient.data$OTHER_PATIENT_ID) %in% intersect(toupper(VHLmut.samples$id), toupper(patient.data$OTHER_PATIENT_ID)),]
patient.data.withVHL.noMuts <- patient.data.withVHL[setdiff(patient.data.withVHL$patientId, patient.data.VHLmut$patientId),]
patient.data.VHLlow <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL < 256.1237,]
patient.data.VHLhigh <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL > 444.9585,]
expressionDF <- as.data.frame(t(expressionDF))
expressionDF$patientId <- substr(rownames(expressionDF), 1, 12)
patient.data.withVHL <- merge(patient.data, expressionDF, by = "patientId")
## get VHL point mutant samples
VHLmut.samples <- read.table("KIRC_TCGA_VHL_casesEffected.2023-02-24.tsv", header = T)
patient.data.VHLmut <- patient.data[toupper(patient.data$OTHER_PATIENT_ID) %in% intersect(toupper(VHLmut.samples$id), toupper(patient.data$OTHER_PATIENT_ID)),]
quantile(expressionDF$VHL)
setwd("~/Documents/speckleSignature/Assess_patient_data/")
library(stringr)
library(dplyr)
library(survival)
library(survminer)
library(ggplot2)
library(hrbrthemes)
library(viridis)
library(cBioPortalData)
library(AnVIL)
study <- "kirc_tcga_pan_can_atlas_2018"
## get clinical data
patient.data <- read.table(paste("patientData_cBioPortal/", study, "_patientData.txt", sep=""), sep="\t", header=T)
## get speckle scores
speckle.data <- read.table(paste("../Speckle_signature_definition/cBioPortal_signatureSpeckleScores_22cancers/", study, "_Zscore_speckleScore.txt", sep=""), sep="\t", header=T, row.names=1)
speckle.data.scores <- as.data.frame(speckle.data$speckleScore)
row.names(speckle.data.scores) <- row.names(speckle.data)
colnames(speckle.data.scores) <- "SpeckleScore"
speckle.data.scores$patientId <- str_sub(row.names(speckle.data.scores), start = 1, end = 12)
speckle.data.scores$patientId <- gsub("\\.", "-", speckle.data.scores$patientId)
## add speckle scores to clinical data
patient.data <- merge(patient.data, speckle.data.scores, by = "patientId")
## add binary for speckle signature
patient.data$SpeckleSignature <- with(patient.data, ifelse(SpeckleScore > 0, "I", "II"))
## download VHL expression data from cBioPortal
## cBioPortal TCGA API is used to generate the speckle signature from tumor samples
cbio <- cBioPortal()
rna.experiment.name <- "mrna_seq_v2_rsem"
mols <- molecularProfiles(cbio, study)
mols <- as.data.frame(mols)
RNAprofileID <- mols$molecularProfileId[grep("_rna_seq_v2_mrna$", mols$molecularProfileId)]
expressionTibble <- getDataByGenes(cbio, molecularProfileIds = RNAprofileID, sampleIds = allSamples(cbio, study)$sampleId, genes = "VHL", by = 'hugoGeneSymbol')
expressionTibble <- na.omit(expressionTibble)
expressionDF <- data.frame(matrix(ncol = length(unique(expressionTibble[[RNAprofileID]]$sampleId)), nrow = length(unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol))))
colnames(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$sampleId)
row.names(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol)
for (i in colnames(expressionDF)){
for (j in row.names(expressionDF)){
value = expressionTibble[[RNAprofileID]]$value[expressionTibble[[RNAprofileID]]$sampleId == i & expressionTibble[[RNAprofileID]]$hugoGeneSymbol == j]
if (!identical(value, numeric(0))){
expressionDF[j, i] <- as.numeric(value)
}
}
}
expressionDF <- as.data.frame(t(expressionDF))
expressionDF$patientId <- substr(rownames(expressionDF), 1, 12)
patient.data.withVHL <- merge(patient.data, expressionDF, by = "patientId")
## get VHL point mutant samples
VHLmut.samples <- read.table("KIRC_TCGA_VHL_casesEffected.2023-02-24.tsv", header = T)
patient.data.VHLmut <- patient.data[toupper(patient.data$OTHER_PATIENT_ID) %in% intersect(toupper(VHLmut.samples$id), toupper(patient.data$OTHER_PATIENT_ID)),]
quantile(expressionDF$VHL)
##        0%       25%       50%       75%      100%
##   28.6607  256.1237  342.5820  444.9585 1334.6600
patient.data.withVHL.noMuts <- patient.data.withVHL[setdiff(patient.data.withVHL$patientId, patient.data.VHLmut$patientId),]
patient.data.VHLlow <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL < 256.1237,]
patient.data.VHLhigh <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL > 444.9585,]
quantile(patient.data.withVHL.noMuts$VHL)
View(patient.data.withVHL.noMuts)
View(patient.data.withVHL)
View(patient.data.withVHL.noMuts)
View(patient.data.withVHL)
patient.data.withVHL.noMuts <- patient.data.withVHL[patient.data.withVHL$patientId %notin% patient.data.VHLmut$patientId,]
patient.data.withVHL.noMuts <- patient.data.withVHL[~(patient.data.withVHL$patientId %in% patient.data.VHLmut$patientId),]
patient.data.withVHL.noMuts <- patient.data.withVHL[patient.data.withVHL$patientId %in% setdiff(patient.data.withVHL$patientId, patient.data.VHLmut$patientId),]
View(patient.data.withVHL.noMuts)
quantile(patient.data.withVHL.noMuts$VHL)
##        0%       25%       50%       75%      100%
##   28.6607  256.1237  342.5820  444.9585 1334.6600
patient.data.VHLlow <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL < 256.1237,]
patient.data.VHLhigh <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL > 444.9585,]
## get VHL point mutant samples
VHLmut.samples <- read.table("KIRC_TCGA_VHL_casesEffected.2023-02-24.tsv", header = T)
patient.data.VHLmut <- patient.data[toupper(patient.data$OTHER_PATIENT_ID) %in% intersect(toupper(VHLmut.samples$id), toupper(patient.data$OTHER_PATIENT_ID)),]
patient.data.withVHL.noMuts <- patient.data.withVHL[patient.data.withVHL$patientId %in% setdiff(patient.data.withVHL$patientId, patient.data.VHLmut$patientId),]
quantile(patient.data.withVHL.noMuts$VHL)
##        0%       25%       50%       75%      100%
##   28.6607  241.1515  336.5210  440.9055 1334.6600
patient.data.VHLlow <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL < 241.1515,]
patient.data.VHLhigh <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL > 440.9055,]
if (!dir.exists("cBioPortal_survival/survival_KIRC_VHLlevel")){
dir.create("cBioPortal_survival/survival_KIRC_VHLlevel")
}
## plot survival based on Sig I or II
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLlow$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLlow)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLlow.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLhigh$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLhigh)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLhigh.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
View(mols)
cbio <- cBioPortal()
mols <- molecularProfiles(cbio, study)
mols <- as.data.frame(mols)
RNAprofileID <- mols$molecularProfileId[grep("_rppa_Zscores$", mols$molecularProfileId)]
cbio <- cBioPortal()
mols <- molecularProfiles(cbio, study)
mols <- as.data.frame(mols)
RNAprofileID <- mols$molecularProfileId[grep("_rppa_Zscores$", mols$molecularProfileId)]
View(expressionTibble)
expressionTibble <- na.omit(expressionTibble)
expressionDF <- data.frame(matrix(ncol = length(unique(expressionTibble[[RNAprofileID]]$sampleId)), nrow = length(unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol))))
colnames(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$sampleId)
row.names(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol)
for (i in colnames(expressionDF)){
for (j in row.names(expressionDF)){
value = expressionTibble[[RNAprofileID]]$value[expressionTibble[[RNAprofileID]]$sampleId == i & expressionTibble[[RNAprofileID]]$hugoGeneSymbol == j]
if (!identical(value, numeric(0))){
expressionDF[j, i] <- as.numeric(value)
}
}
}
expressionTibble <- getDataByGenes(cbio, molecularProfileIds = RNAprofileID, sampleIds = allSamples(cbio, study)$sampleId, genes = "EPAS1", by = 'hugoGeneSymbol')
expressionTibble <- getDataByGenes(cbio, molecularProfileIds = RNAprofileID, sampleIds = allSamples(cbio, study)$sampleId, genes = "VHL", by = 'hugoGeneSymbol')
expressionTibble <- na.omit(expressionTibble)
expressionDF <- data.frame(matrix(ncol = length(unique(expressionTibble[[RNAprofileID]]$sampleId)), nrow = length(unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol))))
colnames(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$sampleId)
row.names(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol)
View(expressionDF)
for (i in colnames(expressionDF)){
for (j in row.names(expressionDF)){
value = expressionTibble[[RNAprofileID]]$value[expressionTibble[[RNAprofileID]]$sampleId == i & expressionTibble[[RNAprofileID]]$hugoGeneSymbol == j]
if (!identical(value, numeric(0))){
expressionDF[j, i] <- as.numeric(value)
}
}
}
View(expressionDF)
expressionDF <- as.data.frame(t(expressionDF))
expressionDF$patientId <- substr(rownames(expressionDF), 1, 12)
patient.data.withVHL <- merge(patient.data, expressionDF, by = "patientId")
## get VHL point mutant samples
VHLmut.samples <- read.table("KIRC_TCGA_VHL_casesEffected.2023-02-24.tsv", header = T)
patient.data.VHLmut <- patient.data[toupper(patient.data$OTHER_PATIENT_ID) %in% intersect(toupper(VHLmut.samples$id), toupper(patient.data$OTHER_PATIENT_ID)),]
patient.data.withVHL.noMuts <- patient.data.withVHL[patient.data.withVHL$patientId %in% setdiff(patient.data.withVHL$patientId, patient.data.VHLmut$patientId),]
quantile(patient.data.withVHL.noMuts$VHL)
patient.data.VHLlow <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL < -0.807025,]
patient.data.VHLhigh <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL >  0.634225,]
if (!dir.exists("cBioPortal_survival/survival_KIRC_VHLlevel")){
dir.create("cBioPortal_survival/survival_KIRC_VHLlevel")
}
## plot survival based on Sig I or II
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLlow$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLlow)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLlow.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLhigh$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLhigh)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLhigh.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
VHLmut.samples <- read.table("KIRC_TCGA_VHL_casesEffected.2023-02-24.tsv", header = T)
patient.data.VHLmut <- patient.data[toupper(patient.data$OTHER_PATIENT_ID) %in% intersect(toupper(VHLmut.samples$id), toupper(patient.data$OTHER_PATIENT_ID)),]
patient.data.withVHL.noMuts <- patient.data.withVHL[patient.data.withVHL$patientId %in% setdiff(patient.data.withVHL$patientId, patient.data.VHLmut$patientId),]
quantile(patient.data.withVHL.noMuts$VHL)
## 0%       25%       50%       75%      100%
## -2.594600 -0.807025 -0.045100  0.634225  2.154700
patient.data.VHLlow <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL < -0.045100,]
patient.data.VHLhigh <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL >  -0.045100,]
if (!dir.exists("cBioPortal_survival/survival_KIRC_VHLlevel")){
dir.create("cBioPortal_survival/survival_KIRC_VHLlevel")
}
## plot survival based on Sig I or II
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLlow$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLlow)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLlow.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLhigh$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLhigh)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLhigh.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
## get VHL point mutant samples
VHLmut.samples <- read.table("KIRC_TCGA_VHL_casesEffected.2023-02-24.tsv", header = T)
patient.data.VHLmut <- patient.data[toupper(patient.data$OTHER_PATIENT_ID) %in% intersect(toupper(VHLmut.samples$id), toupper(patient.data$OTHER_PATIENT_ID)),]
patient.data.withVHL.noMuts <- patient.data.withVHL[patient.data.withVHL$patientId %in% setdiff(patient.data.withVHL$patientId, patient.data.VHLmut$patientId),]
quantile(patient.data.withVHL.noMuts$VHL)
## 0%       25%       50%       75%      100%
## -2.594600 -0.807025 -0.045100  0.634225  2.154700
patient.data.VHLlow <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL < 0.634225,]
patient.data.VHLhigh <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL >  0.634225,]
if (!dir.exists("cBioPortal_survival/survival_KIRC_VHLlevel")){
dir.create("cBioPortal_survival/survival_KIRC_VHLlevel")
}
## plot survival based on Sig I or II
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLlow$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLlow)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLlow.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLhigh$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLhigh)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLhigh.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
setwd("~/Documents/speckleSignature/Assess_patient_data/")
library(stringr)
library(dplyr)
library(survival)
library(survminer)
library(ggplot2)
library(hrbrthemes)
library(viridis)
library(cBioPortalData)
library(AnVIL)
study <- "kirc_tcga_pan_can_atlas_2018"
## get clinical data
patient.data <- read.table(paste("patientData_cBioPortal/", study, "_patientData.txt", sep=""), sep="\t", header=T)
## get speckle scores
speckle.data <- read.table(paste("../Speckle_signature_definition/cBioPortal_signatureSpeckleScores_22cancers/", study, "_Zscore_speckleScore.txt", sep=""), sep="\t", header=T, row.names=1)
speckle.data.scores <- as.data.frame(speckle.data$speckleScore)
row.names(speckle.data.scores) <- row.names(speckle.data)
colnames(speckle.data.scores) <- "SpeckleScore"
speckle.data.scores$patientId <- str_sub(row.names(speckle.data.scores), start = 1, end = 12)
speckle.data.scores$patientId <- gsub("\\.", "-", speckle.data.scores$patientId)
## add speckle scores to clinical data
patient.data <- merge(patient.data, speckle.data.scores, by = "patientId")
## add binary for speckle signature
patient.data$SpeckleSignature <- with(patient.data, ifelse(SpeckleScore > 0, "I", "II"))
## download VHL protein expression data from cBioPortal
## cBioPortal TCGA API is used to generate the speckle signature from tumor samples
cbio <- cBioPortal()
mols <- molecularProfiles(cbio, study)
mols <- as.data.frame(mols)
RNAprofileID <- mols$molecularProfileId[grep("_rppa_Zscores$", mols$molecularProfileId)]
expressionTibble <- getDataByGenes(cbio, molecularProfileIds = RNAprofileID, sampleIds = allSamples(cbio, study)$sampleId, genes = "VHL", by = 'hugoGeneSymbol')
expressionTibble <- na.omit(expressionTibble)
expressionDF <- data.frame(matrix(ncol = length(unique(expressionTibble[[RNAprofileID]]$sampleId)), nrow = length(unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol))))
colnames(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$sampleId)
row.names(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol)
for (i in colnames(expressionDF)){
for (j in row.names(expressionDF)){
value = expressionTibble[[RNAprofileID]]$value[expressionTibble[[RNAprofileID]]$sampleId == i & expressionTibble[[RNAprofileID]]$hugoGeneSymbol == j]
if (!identical(value, numeric(0))){
expressionDF[j, i] <- as.numeric(value)
}
}
}
expressionDF <- as.data.frame(t(expressionDF))
expressionDF$patientId <- substr(rownames(expressionDF), 1, 12)
patient.data.withVHL <- merge(patient.data, expressionDF, by = "patientId")
## get VHL point mutant samples
VHLmut.samples <- read.table("KIRC_TCGA_VHL_casesEffected.2023-02-24.tsv", header = T)
patient.data.VHLmut <- patient.data[toupper(patient.data$OTHER_PATIENT_ID) %in% intersect(toupper(VHLmut.samples$id), toupper(patient.data$OTHER_PATIENT_ID)),]
patient.data.withVHL.noMuts <- patient.data.withVHL[patient.data.withVHL$patientId %in% setdiff(patient.data.withVHL$patientId, patient.data.VHLmut$patientId),]
quantile(patient.data.withVHL.noMuts$VHL)
## 0%       25%       50%       75%      100%
## -2.594600 -0.807025 -0.045100  0.634225  2.154700
patient.data.VHLlow <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL < 0.634225,]
patient.data.VHLhigh <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL >  0.634225,]
if (!dir.exists("cBioPortal_survival/survival_KIRC_VHLlevel")){
dir.create("cBioPortal_survival/survival_KIRC_VHLlevel")
}
## plot survival based on Sig I or II
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLlow$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLlow)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLlow.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLhigh$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLhigh)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLhigh.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
setwd("~/Documents/speckleSignature/Assess_patient_data/")
library(stringr)
library(dplyr)
library(survival)
library(survminer)
library(ggplot2)
library(hrbrthemes)
library(viridis)
library(cBioPortalData)
library(AnVIL)
study <- "kirc_tcga_pan_can_atlas_2018"
## get clinical data
patient.data <- read.table(paste("patientData_cBioPortal/", study, "_patientData.txt", sep=""), sep="\t", header=T)
## get speckle scores
speckle.data <- read.table(paste("../Speckle_signature_definition/cBioPortal_signatureSpeckleScores_22cancers/", study, "_Zscore_speckleScore.txt", sep=""), sep="\t", header=T, row.names=1)
speckle.data.scores <- as.data.frame(speckle.data$speckleScore)
row.names(speckle.data.scores) <- row.names(speckle.data)
colnames(speckle.data.scores) <- "SpeckleScore"
speckle.data.scores$patientId <- str_sub(row.names(speckle.data.scores), start = 1, end = 12)
speckle.data.scores$patientId <- gsub("\\.", "-", speckle.data.scores$patientId)
## add speckle scores to clinical data
patient.data <- merge(patient.data, speckle.data.scores, by = "patientId")
## add binary for speckle signature
patient.data$SpeckleSignature <- with(patient.data, ifelse(SpeckleScore > 0, "I", "II"))
## download VHL protein expression data from cBioPortal
## cBioPortal TCGA API is used to generate the speckle signature from tumor samples
cbio <- cBioPortal()
mols <- molecularProfiles(cbio, study)
mols <- as.data.frame(mols)
RNAprofileID <- mols$molecularProfileId[grep("_rppa_Zscores$", mols$molecularProfileId)]
expressionTibble <- getDataByGenes(cbio, molecularProfileIds = RNAprofileID, sampleIds = allSamples(cbio, study)$sampleId, genes = "VHL", by = 'hugoGeneSymbol')
expressionTibble <- na.omit(expressionTibble)
expressionDF <- data.frame(matrix(ncol = length(unique(expressionTibble[[RNAprofileID]]$sampleId)), nrow = length(unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol))))
colnames(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$sampleId)
row.names(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol)
for (i in colnames(expressionDF)){
for (j in row.names(expressionDF)){
value = expressionTibble[[RNAprofileID]]$value[expressionTibble[[RNAprofileID]]$sampleId == i & expressionTibble[[RNAprofileID]]$hugoGeneSymbol == j]
if (!identical(value, numeric(0))){
expressionDF[j, i] <- as.numeric(value)
}
}
}
expressionDF <- as.data.frame(t(expressionDF))
expressionDF$patientId <- substr(rownames(expressionDF), 1, 12)
patient.data.withVHL <- merge(patient.data, expressionDF, by = "patientId")
## get VHL point mutant samples
VHLmut.samples <- read.table("KIRC_TCGA_VHL_casesEffected.2023-02-24.tsv", header = T)
patient.data.VHLmut <- patient.data[toupper(patient.data$OTHER_PATIENT_ID) %in% intersect(toupper(VHLmut.samples$id), toupper(patient.data$OTHER_PATIENT_ID)),]
patient.data.withVHL.noMuts <- patient.data.withVHL[patient.data.withVHL$patientId %in% setdiff(patient.data.withVHL$patientId, patient.data.VHLmut$patientId),]
quantile(patient.data.withVHL.noMuts$VHL)
## 0%       25%       50%       75%      100%
## -2.594600 -0.807025 -0.045100  0.634225  2.154700
patient.data.VHLlow <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL < 0.634225,]
patient.data.VHLhigh <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL >  -0.807025,]
if (!dir.exists("cBioPortal_survival/survival_KIRC_VHLlevel")){
dir.create("cBioPortal_survival/survival_KIRC_VHLlevel")
}
## plot survival based on Sig I or II
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLlow$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLlow)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLlow.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLhigh$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLhigh)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLhigh.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
setwd("~/Documents/speckleSignature/Assess_patient_data/")
library(stringr)
library(dplyr)
library(survival)
library(survminer)
library(ggplot2)
library(hrbrthemes)
library(viridis)
library(cBioPortalData)
library(AnVIL)
study <- "kirc_tcga_pan_can_atlas_2018"
## get clinical data
patient.data <- read.table(paste("patientData_cBioPortal/", study, "_patientData.txt", sep=""), sep="\t", header=T)
## get speckle scores
speckle.data <- read.table(paste("../Speckle_signature_definition/cBioPortal_signatureSpeckleScores_22cancers/", study, "_Zscore_speckleScore.txt", sep=""), sep="\t", header=T, row.names=1)
speckle.data.scores <- as.data.frame(speckle.data$speckleScore)
row.names(speckle.data.scores) <- row.names(speckle.data)
colnames(speckle.data.scores) <- "SpeckleScore"
speckle.data.scores$patientId <- str_sub(row.names(speckle.data.scores), start = 1, end = 12)
speckle.data.scores$patientId <- gsub("\\.", "-", speckle.data.scores$patientId)
## add speckle scores to clinical data
patient.data <- merge(patient.data, speckle.data.scores, by = "patientId")
## add binary for speckle signature
patient.data$SpeckleSignature <- with(patient.data, ifelse(SpeckleScore > 0, "I", "II"))
## download VHL protein expression data from cBioPortal
## cBioPortal TCGA API is used to generate the speckle signature from tumor samples
cbio <- cBioPortal()
mols <- molecularProfiles(cbio, study)
mols <- as.data.frame(mols)
RNAprofileID <- mols$molecularProfileId[grep("_rppa_Zscores$", mols$molecularProfileId)]
expressionTibble <- getDataByGenes(cbio, molecularProfileIds = RNAprofileID, sampleIds = allSamples(cbio, study)$sampleId, genes = "VHL", by = 'hugoGeneSymbol')
expressionTibble <- na.omit(expressionTibble)
expressionDF <- data.frame(matrix(ncol = length(unique(expressionTibble[[RNAprofileID]]$sampleId)), nrow = length(unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol))))
colnames(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$sampleId)
row.names(expressionDF) <- unique(expressionTibble[[RNAprofileID]]$hugoGeneSymbol)
for (i in colnames(expressionDF)){
for (j in row.names(expressionDF)){
value = expressionTibble[[RNAprofileID]]$value[expressionTibble[[RNAprofileID]]$sampleId == i & expressionTibble[[RNAprofileID]]$hugoGeneSymbol == j]
if (!identical(value, numeric(0))){
expressionDF[j, i] <- as.numeric(value)
}
}
}
expressionDF <- as.data.frame(t(expressionDF))
expressionDF$patientId <- substr(rownames(expressionDF), 1, 12)
patient.data.withVHL <- merge(patient.data, expressionDF, by = "patientId")
## get VHL point mutant samples
VHLmut.samples <- read.table("KIRC_TCGA_VHL_casesEffected.2023-02-24.tsv", header = T)
patient.data.VHLmut <- patient.data[toupper(patient.data$OTHER_PATIENT_ID) %in% intersect(toupper(VHLmut.samples$id), toupper(patient.data$OTHER_PATIENT_ID)),]
patient.data.withVHL.noMuts <- patient.data.withVHL[patient.data.withVHL$patientId %in% setdiff(patient.data.withVHL$patientId, patient.data.VHLmut$patientId),]
quantile(patient.data.withVHL.noMuts$VHL)
## 0%       25%       50%       75%      100%
## -2.594600 -0.807025 -0.045100  0.634225  2.154700
patient.data.VHLlow <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL < -0.807025,]
patient.data.VHLhigh <- patient.data.withVHL.noMuts[patient.data.withVHL.noMuts$VHL >  0.634225,]
if (!dir.exists("cBioPortal_survival/survival_KIRC_VHLlevel")){
dir.create("cBioPortal_survival/survival_KIRC_VHLlevel")
}
## plot survival based on Sig I or II
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLlow$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLlow)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLlow.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
dssfit <- survfit(Surv(DSS_MONTHS, as.numeric(str_sub(patient.data.VHLhigh$DSS_STATUS, start = 1, end = 1)))~SpeckleSignature, data = patient.data.VHLhigh)
p = ggsurvplot(dssfit, conf.int=TRUE, pval=TRUE, legend.labs=c("I", "II"), legend.title="Speckle signature", palette = c("#c66b3d", "#26495c"))
fileName = paste("cBioPortal_survival/survival_KIRC_VHLlevel/DSS_", study, "_IvsII_KIRC_VHLhigh.pdf", sep = "")
pdf(fileName, width = 5, height = 5, onefile=FALSE)
print(p)
dev.off()
setwd("~/Documents/dataIntegration-Alexander2023/speckleAssociationWithSpeckleSignature/")
library(ggplot2)
library(ggpubr)
library(viridis)
library(dplyr)
A <- read.table("../medianGeneExpression_KIRC_specklepatientGroups_withSONsignal.txt", sep="\t", header=T)
